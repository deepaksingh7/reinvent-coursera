Resources:
  DataTableStream:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: True
      EventSourceArn:
        Fn::GetAtt: [ CourseTable , StreamArn ]
      FunctionName:
        Fn::GetAtt: [ SendCourseNotificationFunction , Arn ]
      StartingPosition: LATEST
  SendCourseNotificationFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: >
          var AWS = require('aws-sdk');
          AWS.config.update({region: process.env.APP_REGION}); 
          exports.handler = function(event, context, callback) {
              console.log(process.env.APP_REGION);
              console.log(process.env.SNS_REF);
              console.log(JSON.stringify(event, null, 2));
              var snsMessage = null;
              event.Records.forEach(function(record) {
                  snsMessage = null;
                  if(record.eventName === 'MODIFY'){
                      let courseName = record.dynamodb.NewImage.courseName.S;
                      let oldCourseName = record.dynamodb.OldImage.courseName.S;
                      if(courseName && oldCourseName){
                          if(courseName === oldCourseName){
                              snsMessage = "Please note that the following course is updated - " +courseName;
                          }else {
                              snsMessage = "Please note that the following course is updated - " + oldCourseName + ".\nThe course is now renamed as - " + courseName;
                          }
                      }else {
                          snsMessage = "Please note that some course is updated";
                      }
                  }else if(record.eventName === 'INSERT'){
                      let courseName = record.dynamodb.NewImage.courseName.S;
                      if(courseName){
                          snsMessage = "Please note that the following new course is published - " + courseName;
                      }else{
                          snsMessage = "Please note that the some new course is published";
                      }
                  }else if(record.eventName === 'REMOVE'){
                      let oldCourseName = record.dynamodb.OldImage.courseName.S;
                      if(oldCourseName){
                          snsMessage = "Please note that the following course is no longer available - " + oldCourseName;
                      }else{
                          snsMessage = "Please note that some course is no longer available";
                      }
                      
                  }else {
                      console.log("Do Nothing");
                  }
                  if(snsMessage !== null){
                      console.log(snsMessage);
                      var params = {
                                    Subject: "Notification from Re-invent Coursera App",
                                    Message: snsMessage,
                                    TopicArn: process.env.SNS_REF
                                  };
                      // Create promise and SNS service object
                      var publishTextPromise = new AWS.SNS({apiVersion: '2010-03-31'}).publish(params).promise();
                      // Handle promise's fulfilled/rejected states
                      publishTextPromise.then(function(data) {console.log("MessageID is " + data.MessageId);}).catch(function(err) {console.error(err, err.stack);});
                  }
              });
              callback(null,"done");
          };
      Handler: index.handler
      Role:
        Fn::GetAtt: [ LambdaRole , Arn ]
      Runtime: nodejs8.10
      Timeout: 300
      FunctionName: ${self:custom.stage}-${self:service}-sendCourseNotification
      Environment:
        Variables:
          SNS_REF:
            Ref: SNSTopic
          APP_REGION: ${self:provider.region}
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: LambdaRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
            - Effect: Allow
              Action:
              - dynamodb:DescribeStream
              - dynamodb:GetRecords
              - dynamodb:GetShardIterator
              - dynamodb:ListStreams
              Resource: "*"
            - Effect: Allow
              Action:
              - SNS:Publish
              Resource:
                Ref: SNSTopic
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "Re-invent Coursera Course Notifications"
      TopicName: "${self:custom.snsTopicName}"
# Print out the arn of the SNS Topic that is created
Outputs:
  SNSTopicARN:
    Value:
      Ref: SNSTopic